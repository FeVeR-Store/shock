{"version":3,"file":"js/907.0ebc0f86.js","mappings":"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","sources":["webpack://shock/../../packages/utils/objects.ts","webpack://shock/../../packages/components/alert/src/alert.ts","webpack://shock/../../packages/components/alert/src/alert.vue","webpack://shock/../../packages/components/alert/index.ts","webpack://shock/../../packages/components/input/src/utils.ts","webpack://shock/../../packages/constants/event.ts","webpack://shock/../../packages/components/input/src/input.ts","webpack://shock/../../packages/hooks/use-attrs/index.ts","webpack://shock/../../packages/hooks/use-cursor/index.ts","webpack://shock/../../packages/utils/i18n.ts","webpack://shock/../../packages/components/input/src/input.vue","webpack://shock/../../packages/components/input/index.ts"],"sourcesContent":["import { get, set } from 'lodash-unified'\nimport type { Entries } from 'type-fest'\nimport type { Arrayable } from '.'\n\nexport const keysOf = <T>(arr: T) => Object.keys(arr) as Array<keyof T>\nexport const entriesOf = <T>(arr: T) => Object.entries(arr) as Entries<T>\nexport { hasOwn } from '@vue/shared'\n\nexport const getProp = <T = any>(\n  obj: Record<string, any>,\n  path: Arrayable<string>,\n  defaultValue?: any\n): { value: T } => {\n  return {\n    get value() {\n      return get(obj, path, defaultValue)\n    },\n    set value(val: any) {\n      set(obj, path, val)\n    },\n  }\n}\n","import { TypeComponentsMap, buildProps, keysOf } from '@element-plus/utils'\nimport type { ExtractPropTypes } from 'vue'\n\nexport const alertEffects = ['light', 'dark'] as const\n\nexport const alertProps = buildProps({\n  /**\n   * @description alert title.\n   */\n  title: {\n    type: String,\n    default: '',\n  },\n  description: {\n    type: String,\n    default: '',\n  },\n  /**\n   * @description alert type.\n   */\n  type: {\n    type: String,\n    values: keysOf(TypeComponentsMap),\n    default: 'info',\n  },\n  /**\n   * @description whether alert can be dismissed.\n   */\n  closable: {\n    type: Boolean,\n    default: true,\n  },\n  /**\n   * @description text for replacing x button\n   */\n  closeText: {\n    type: String,\n    default: '',\n  },\n  /**\n   * @description whether show icon\n   */\n  showIcon: Boolean,\n  /**\n   * @description should content be placed in center.\n   */\n  center: Boolean,\n  effect: {\n    type: String,\n    values: alertEffects,\n    default: 'light',\n  },\n} as const)\nexport type AlertProps = ExtractPropTypes<typeof alertProps>\n\nexport const alertEmits = {\n  close: (evt: MouseEvent) => evt instanceof MouseEvent,\n}\nexport type AlertEmits = typeof alertEmits\n","<template>\n  <transition :name=\"ns.b('fade')\">\n    <div\n      v-show=\"visible\"\n      :class=\"[ns.b(), ns.m(type), ns.is('center', center), ns.is(effect)]\"\n      role=\"alert\"\n    >\n      <el-icon v-if=\"showIcon && iconComponent\" :class=\"iconClass\">\n        <component :is=\"iconComponent\" />\n      </el-icon>\n\n      <div :class=\"ns.e('content')\">\n        <span\n          v-if=\"title || $slots.title\"\n          :class=\"[ns.e('title'), isBoldTitle]\"\n        >\n          <slot name=\"title\">{{ title }}</slot>\n        </span>\n        <p v-if=\"$slots.default || description\" :class=\"ns.e('description')\">\n          <slot>\n            {{ description }}\n          </slot>\n        </p>\n        <template v-if=\"closable\">\n          <div\n            v-if=\"closeText\"\n            :class=\"[ns.e('close-btn'), ns.is('customed')]\"\n            @click=\"close\"\n          >\n            {{ closeText }}\n          </div>\n          <el-icon v-else :class=\"ns.e('close-btn')\" @click=\"close\">\n            <Close />\n          </el-icon>\n        </template>\n      </div>\n    </div>\n  </transition>\n</template>\n<script lang=\"ts\" setup>\nimport { computed, ref, useSlots } from 'vue'\nimport { ElIcon } from '@element-plus/components/icon'\nimport { TypeComponents, TypeComponentsMap } from '@element-plus/utils'\nimport { useNamespace } from '@element-plus/hooks'\nimport { alertEmits, alertProps } from './alert'\n\nconst { Close } = TypeComponents\n\ndefineOptions({\n  name: 'ElAlert',\n})\n\nconst props = defineProps(alertProps)\nconst emit = defineEmits(alertEmits)\nconst slots = useSlots()\n\nconst ns = useNamespace('alert')\n\nconst visible = ref(true)\n\nconst iconComponent = computed(() => TypeComponentsMap[props.type])\n\nconst iconClass = computed(() => [\n  ns.e('icon'),\n  { [ns.is('big')]: !!props.description || !!slots.default },\n])\n\nconst isBoldTitle = computed(() => {\n  return { [ns.is('bold')]: props.description || slots.default }\n})\n\nconst close = (evt: MouseEvent) => {\n  visible.value = false\n  emit('close', evt)\n}\n</script>\n","import { withInstall } from '@element-plus/utils'\n\nimport Alert from './src/alert.vue'\n\nexport const ElAlert = withInstall(Alert)\nexport default ElAlert\n\nexport * from './src/alert'\nexport type { AlertInstance } from './src/instance'\n","import { isNumber } from '@element-plus/utils'\n\nlet hiddenTextarea: HTMLTextAreaElement | undefined = undefined\n\nconst HIDDEN_STYLE = `\n  height:0 !important;\n  visibility:hidden !important;\n  overflow:hidden !important;\n  position:absolute !important;\n  z-index:-1000 !important;\n  top:0 !important;\n  right:0 !important;\n`\n\nconst CONTEXT_STYLE = [\n  'letter-spacing',\n  'line-height',\n  'padding-top',\n  'padding-bottom',\n  'font-family',\n  'font-weight',\n  'font-size',\n  'text-rendering',\n  'text-transform',\n  'width',\n  'text-indent',\n  'padding-left',\n  'padding-right',\n  'border-width',\n  'box-sizing',\n]\n\ntype NodeStyle = {\n  contextStyle: string\n  boxSizing: string\n  paddingSize: number\n  borderSize: number\n}\n\ntype TextAreaHeight = {\n  height: string\n  minHeight?: string\n}\n\nfunction calculateNodeStyling(targetElement: Element): NodeStyle {\n  const style = window.getComputedStyle(targetElement)\n\n  const boxSizing = style.getPropertyValue('box-sizing')\n\n  const paddingSize =\n    Number.parseFloat(style.getPropertyValue('padding-bottom')) +\n    Number.parseFloat(style.getPropertyValue('padding-top'))\n\n  const borderSize =\n    Number.parseFloat(style.getPropertyValue('border-bottom-width')) +\n    Number.parseFloat(style.getPropertyValue('border-top-width'))\n\n  const contextStyle = CONTEXT_STYLE.map(\n    (name) => `${name}:${style.getPropertyValue(name)}`\n  ).join(';')\n\n  return { contextStyle, paddingSize, borderSize, boxSizing }\n}\n\nexport function calcTextareaHeight(\n  targetElement: HTMLTextAreaElement,\n  minRows = 1,\n  maxRows?: number\n): TextAreaHeight {\n  if (!hiddenTextarea) {\n    hiddenTextarea = document.createElement('textarea')\n    document.body.appendChild(hiddenTextarea)\n  }\n\n  const { paddingSize, borderSize, boxSizing, contextStyle } =\n    calculateNodeStyling(targetElement)\n\n  hiddenTextarea.setAttribute('style', `${contextStyle};${HIDDEN_STYLE}`)\n  hiddenTextarea.value = targetElement.value || targetElement.placeholder || ''\n\n  let height = hiddenTextarea.scrollHeight\n  const result = {} as TextAreaHeight\n\n  if (boxSizing === 'border-box') {\n    height = height + borderSize\n  } else if (boxSizing === 'content-box') {\n    height = height - paddingSize\n  }\n\n  hiddenTextarea.value = ''\n  const singleRowHeight = hiddenTextarea.scrollHeight - paddingSize\n\n  if (isNumber(minRows)) {\n    let minHeight = singleRowHeight * minRows\n    if (boxSizing === 'border-box') {\n      minHeight = minHeight + paddingSize + borderSize\n    }\n    height = Math.max(minHeight, height)\n    result.minHeight = `${minHeight}px`\n  }\n  if (isNumber(maxRows)) {\n    let maxHeight = singleRowHeight * maxRows\n    if (boxSizing === 'border-box') {\n      maxHeight = maxHeight + paddingSize + borderSize\n    }\n    height = Math.min(maxHeight, height)\n  }\n  result.height = `${height}px`\n  hiddenTextarea.parentNode?.removeChild(hiddenTextarea)\n  hiddenTextarea = undefined\n\n  return result\n}\n","export const UPDATE_MODEL_EVENT = 'update:modelValue'\nexport const CHANGE_EVENT = 'change'\nexport const INPUT_EVENT = 'input'\n","import { isString } from '@vue/shared'\nimport {\n  buildProps,\n  definePropType,\n  iconPropType,\n  mutable,\n} from '@element-plus/utils'\nimport { UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport { useSizeProp } from '@element-plus/hooks'\nimport type Input from './input.vue'\nimport type { ExtractPropTypes, StyleValue } from 'vue'\n\nexport type InputAutoSize = { minRows?: number; maxRows?: number } | boolean\n\nexport const inputProps = buildProps({\n  /**\n   * @description native input id\n   */\n  id: {\n    type: String,\n    default: undefined,\n  },\n  /**\n   * @description input box size\n   */\n  size: useSizeProp,\n  /**\n   * @description whether to disable\n   */\n  disabled: Boolean,\n  /**\n   * @description binding value\n   */\n  modelValue: {\n    type: definePropType<string | number | null | undefined>([\n      String,\n      Number,\n      Object,\n    ]),\n    default: '',\n  },\n  /**\n   * @description type of input\n   */\n  type: {\n    type: String,\n    default: 'text',\n  },\n  /**\n   * @description control the resizability\n   */\n  resize: {\n    type: String,\n    values: ['none', 'both', 'horizontal', 'vertical'],\n  },\n  /**\n   * @description whether textarea has an adaptive height\n   */\n  autosize: {\n    type: definePropType<InputAutoSize>([Boolean, Object]),\n    default: false,\n  },\n  /**\n   * @description native input autocomplete\n   */\n  autocomplete: {\n    type: String,\n    default: 'off',\n  },\n  /**\n   * @description format content\n   */\n  formatter: {\n    type: Function,\n  },\n  /**\n   * @description parse content\n   */\n  parser: {\n    type: Function,\n  },\n  /**\n   * @description placeholder\n   */\n  placeholder: {\n    type: String,\n  },\n  /**\n   * @description native input form\n   */\n  form: {\n    type: String,\n  },\n  /**\n   * @description native input readonly\n   */\n  readonly: {\n    type: Boolean,\n    default: false,\n  },\n  /**\n   * @description native input readonly\n   */\n  clearable: {\n    type: Boolean,\n    default: false,\n  },\n  /**\n   * @description toggleable password input\n   */\n  showPassword: {\n    type: Boolean,\n    default: false,\n  },\n  /**\n   * @description word count\n   */\n  showWordLimit: {\n    type: Boolean,\n    default: false,\n  },\n  /**\n   * @description suffix icon\n   */\n  suffixIcon: {\n    type: iconPropType,\n  },\n  /**\n   * @description prefix icon\n   */\n  prefixIcon: {\n    type: iconPropType,\n  },\n  /**\n   * @description container role, internal properties provided for use by the picker component\n   */\n  containerRole: {\n    type: String,\n    default: undefined,\n  },\n  /**\n   * @description native input aria-label\n   */\n  label: {\n    type: String,\n    default: undefined,\n  },\n  /**\n   * @description input tabindex\n   */\n  tabindex: {\n    type: [String, Number],\n    default: 0,\n  },\n  /**\n   * @description whether to trigger form validation\n   */\n  validateEvent: {\n    type: Boolean,\n    default: true,\n  },\n  /**\n   * @description input or texearea element style\n   */\n  inputStyle: {\n    type: definePropType<StyleValue>([Object, Array, String]),\n    default: () => mutable({} as const),\n  },\n} as const)\nexport type InputProps = ExtractPropTypes<typeof inputProps>\n\nexport const inputEmits = {\n  [UPDATE_MODEL_EVENT]: (value: string) => isString(value),\n  input: (value: string) => isString(value),\n  change: (value: string) => isString(value),\n  focus: (evt: FocusEvent) => evt instanceof FocusEvent,\n  blur: (evt: FocusEvent) => evt instanceof FocusEvent,\n  clear: () => true,\n  mouseleave: (evt: MouseEvent) => evt instanceof MouseEvent,\n  mouseenter: (evt: MouseEvent) => evt instanceof MouseEvent,\n  // NOTE: when autofill by browser, the keydown event is instanceof Event, not KeyboardEvent\n  // relative bug report https://github.com/element-plus/element-plus/issues/6665\n  keydown: (evt: KeyboardEvent | Event) => evt instanceof Event,\n  compositionstart: (evt: CompositionEvent) => evt instanceof CompositionEvent,\n  compositionupdate: (evt: CompositionEvent) => evt instanceof CompositionEvent,\n  compositionend: (evt: CompositionEvent) => evt instanceof CompositionEvent,\n}\nexport type InputEmits = typeof inputEmits\n\nexport type InputInstance = InstanceType<typeof Input>\n","import { computed, getCurrentInstance } from 'vue'\nimport { fromPairs } from 'lodash-unified'\nimport { debugWarn } from '@element-plus/utils'\n\nimport type { ComputedRef } from 'vue'\n\ninterface Params {\n  excludeListeners?: boolean\n  excludeKeys?: ComputedRef<string[]>\n}\n\nconst DEFAULT_EXCLUDE_KEYS = ['class', 'style']\nconst LISTENER_PREFIX = /^on[A-Z]/\n\nexport const useAttrs = (\n  params: Params = {}\n): ComputedRef<Record<string, unknown>> => {\n  const { excludeListeners = false, excludeKeys } = params\n  const allExcludeKeys = computed<string[]>(() => {\n    return (excludeKeys?.value || []).concat(DEFAULT_EXCLUDE_KEYS)\n  })\n\n  const instance = getCurrentInstance()\n  if (!instance) {\n    debugWarn(\n      'use-attrs',\n      'getCurrentInstance() returned null. useAttrs() must be called at the top of a setup function'\n    )\n    return computed(() => ({}))\n  }\n\n  return computed(() =>\n    fromPairs(\n      Object.entries(instance.proxy?.$attrs!).filter(\n        ([key]) =>\n          !allExcludeKeys.value.includes(key) &&\n          !(excludeListeners && LISTENER_PREFIX.test(key))\n      )\n    )\n  )\n}\n","import { ref } from 'vue'\n\nimport type { ShallowRef } from 'vue'\n\n// Keep input cursor in the correct position when we use formatter.\nexport function useCursor(\n  input: ShallowRef<HTMLInputElement | undefined>\n): [() => void, () => void] {\n  const selectionRef = ref<{\n    selectionStart?: number\n    selectionEnd?: number\n    value?: string\n    beforeTxt?: string\n    afterTxt?: string\n  }>()\n\n  function recordCursor() {\n    if (input.value == undefined) return\n\n    const { selectionStart, selectionEnd, value } = input.value\n\n    if (selectionStart == null || selectionEnd == null) return\n\n    const beforeTxt = value.slice(0, Math.max(0, selectionStart))\n    const afterTxt = value.slice(Math.max(0, selectionEnd))\n\n    selectionRef.value = {\n      selectionStart,\n      selectionEnd,\n      value,\n      beforeTxt,\n      afterTxt,\n    }\n  }\n  function setCursor() {\n    if (input.value == undefined || selectionRef.value == undefined) return\n\n    const { value } = input.value\n    const { beforeTxt, afterTxt, selectionStart } = selectionRef.value\n\n    if (\n      beforeTxt == undefined ||\n      afterTxt == undefined ||\n      selectionStart == undefined\n    )\n      return\n\n    let startPos = value.length\n\n    if (value.endsWith(afterTxt)) {\n      startPos = value.length - afterTxt.length\n    } else if (value.startsWith(beforeTxt)) {\n      startPos = beforeTxt.length\n    } else {\n      const beforeLastChar = beforeTxt[selectionStart - 1]\n      const newIndex = value.indexOf(beforeLastChar, selectionStart - 1)\n      if (newIndex !== -1) {\n        startPos = newIndex + 1\n      }\n    }\n\n    input.value.setSelectionRange(startPos, startPos)\n  }\n\n  return [recordCursor, setCursor]\n}\n","export const isKorean = (text: string) =>\n  /([(\\uAC00-\\uD7AF)|(\\u3130-\\u318F)])+/gi.test(text)\n","<template>\n  <div\n    v-show=\"type !== 'hidden'\"\n    v-bind=\"containerAttrs\"\n    :class=\"containerKls\"\n    :style=\"containerStyle\"\n    :role=\"containerRole\"\n    @mouseenter=\"handleMouseEnter\"\n    @mouseleave=\"handleMouseLeave\"\n  >\n    <!-- input -->\n    <template v-if=\"type !== 'textarea'\">\n      <!-- prepend slot -->\n      <div v-if=\"$slots.prepend\" :class=\"nsInput.be('group', 'prepend')\">\n        <slot name=\"prepend\" />\n      </div>\n\n      <div :class=\"wrapperKls\">\n        <!-- prefix slot -->\n        <span v-if=\"$slots.prefix || prefixIcon\" :class=\"nsInput.e('prefix')\">\n          <span :class=\"nsInput.e('prefix-inner')\" @click=\"focus\">\n            <slot name=\"prefix\" />\n            <el-icon v-if=\"prefixIcon\" :class=\"nsInput.e('icon')\">\n              <component :is=\"prefixIcon\" />\n            </el-icon>\n          </span>\n        </span>\n\n        <input\n          :id=\"inputId\"\n          ref=\"input\"\n          :class=\"nsInput.e('inner')\"\n          v-bind=\"attrs\"\n          :type=\"showPassword ? (passwordVisible ? 'text' : 'password') : type\"\n          :disabled=\"inputDisabled\"\n          :formatter=\"formatter\"\n          :parser=\"parser\"\n          :readonly=\"readonly\"\n          :autocomplete=\"autocomplete\"\n          :tabindex=\"tabindex\"\n          :aria-label=\"label\"\n          :placeholder=\"placeholder\"\n          :style=\"inputStyle\"\n          :form=\"props.form\"\n          @compositionstart=\"handleCompositionStart\"\n          @compositionupdate=\"handleCompositionUpdate\"\n          @compositionend=\"handleCompositionEnd\"\n          @input=\"handleInput\"\n          @focus=\"handleFocus\"\n          @blur=\"handleBlur\"\n          @change=\"handleChange\"\n          @keydown=\"handleKeydown\"\n        />\n\n        <!-- suffix slot -->\n        <span v-if=\"suffixVisible\" :class=\"nsInput.e('suffix')\">\n          <span :class=\"nsInput.e('suffix-inner')\" @click=\"focus\">\n            <template\n              v-if=\"!showClear || !showPwdVisible || !isWordLimitVisible\"\n            >\n              <slot name=\"suffix\" />\n              <el-icon v-if=\"suffixIcon\" :class=\"nsInput.e('icon')\">\n                <component :is=\"suffixIcon\" />\n              </el-icon>\n            </template>\n            <el-icon\n              v-if=\"showClear\"\n              :class=\"[nsInput.e('icon'), nsInput.e('clear')]\"\n              @mousedown.prevent=\"NOOP\"\n              @click=\"clear\"\n            >\n              <circle-close />\n            </el-icon>\n            <el-icon\n              v-if=\"showPwdVisible\"\n              :class=\"[nsInput.e('icon'), nsInput.e('password')]\"\n              @click=\"handlePasswordVisible\"\n            >\n              <component :is=\"passwordIcon\" />\n            </el-icon>\n            <span v-if=\"isWordLimitVisible\" :class=\"nsInput.e('count')\">\n              <span :class=\"nsInput.e('count-inner')\">\n                {{ textLength }} / {{ attrs.maxlength }}\n              </span>\n            </span>\n            <el-icon\n              v-if=\"validateState && validateIcon && needStatusIcon\"\n              :class=\"[\n                nsInput.e('icon'),\n                nsInput.e('validateIcon'),\n                nsInput.is('loading', validateState === 'validating'),\n              ]\"\n            >\n              <component :is=\"validateIcon\" />\n            </el-icon>\n          </span>\n        </span>\n      </div>\n\n      <!-- append slot -->\n      <div v-if=\"$slots.append\" :class=\"nsInput.be('group', 'append')\">\n        <slot name=\"append\" />\n      </div>\n    </template>\n\n    <!-- textarea -->\n    <template v-else>\n      <textarea\n        :id=\"inputId\"\n        ref=\"textarea\"\n        :class=\"nsTextarea.e('inner')\"\n        v-bind=\"attrs\"\n        :tabindex=\"tabindex\"\n        :disabled=\"inputDisabled\"\n        :readonly=\"readonly\"\n        :autocomplete=\"autocomplete\"\n        :style=\"textareaStyle\"\n        :aria-label=\"label\"\n        :placeholder=\"placeholder\"\n        :form=\"props.form\"\n        @compositionstart=\"handleCompositionStart\"\n        @compositionupdate=\"handleCompositionUpdate\"\n        @compositionend=\"handleCompositionEnd\"\n        @input=\"handleInput\"\n        @focus=\"handleFocus\"\n        @blur=\"handleBlur\"\n        @change=\"handleChange\"\n        @keydown=\"handleKeydown\"\n      />\n      <span\n        v-if=\"isWordLimitVisible\"\n        :style=\"countStyle\"\n        :class=\"nsInput.e('count')\"\n      >\n        {{ textLength }} / {{ attrs.maxlength }}\n      </span>\n    </template>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport {\n  computed,\n  nextTick,\n  onMounted,\n  ref,\n  shallowRef,\n  toRef,\n  useAttrs as useRawAttrs,\n  useSlots,\n  watch,\n} from 'vue'\nimport { isClient, useResizeObserver } from '@vueuse/core'\nimport { isNil } from 'lodash-unified'\nimport { ElIcon } from '@element-plus/components/icon'\nimport {\n  CircleClose,\n  Hide as IconHide,\n  View as IconView,\n} from '@element-plus/icons-vue'\nimport {\n  NOOP,\n  ValidateComponentsMap,\n  debugWarn,\n  isKorean,\n  isObject,\n} from '@element-plus/utils'\nimport {\n  useAttrs,\n  useCursor,\n  useDisabled,\n  useFormItem,\n  useFormItemInputId,\n  useNamespace,\n  useSize,\n} from '@element-plus/hooks'\nimport { UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport { calcTextareaHeight } from './utils'\nimport { inputEmits, inputProps } from './input'\nimport type { StyleValue } from 'vue'\n\ntype TargetElement = HTMLInputElement | HTMLTextAreaElement\n\ndefineOptions({\n  name: 'ElInput',\n  inheritAttrs: false,\n})\nconst props = defineProps(inputProps)\nconst emit = defineEmits(inputEmits)\n\nconst rawAttrs = useRawAttrs()\nconst slots = useSlots()\n\nconst containerAttrs = computed(() => {\n  const comboBoxAttrs: Record<string, unknown> = {}\n  if (props.containerRole === 'combobox') {\n    comboBoxAttrs['aria-haspopup'] = rawAttrs['aria-haspopup']\n    comboBoxAttrs['aria-owns'] = rawAttrs['aria-owns']\n    comboBoxAttrs['aria-expanded'] = rawAttrs['aria-expanded']\n  }\n  return comboBoxAttrs\n})\n\nconst containerKls = computed(() => [\n  props.type === 'textarea' ? nsTextarea.b() : nsInput.b(),\n  nsInput.m(inputSize.value),\n  nsInput.is('disabled', inputDisabled.value),\n  nsInput.is('exceed', inputExceed.value),\n  {\n    [nsInput.b('group')]: slots.prepend || slots.append,\n    [nsInput.bm('group', 'append')]: slots.append,\n    [nsInput.bm('group', 'prepend')]: slots.prepend,\n    [nsInput.m('prefix')]: slots.prefix || props.prefixIcon,\n    [nsInput.m('suffix')]:\n      slots.suffix || props.suffixIcon || props.clearable || props.showPassword,\n    [nsInput.bm('suffix', 'password-clear')]:\n      showClear.value && showPwdVisible.value,\n  },\n  rawAttrs.class,\n])\n\nconst wrapperKls = computed(() => [\n  nsInput.e('wrapper'),\n  nsInput.is('focus', focused.value),\n])\n\nconst attrs = useAttrs({\n  excludeKeys: computed<string[]>(() => {\n    return Object.keys(containerAttrs.value)\n  }),\n})\nconst { form, formItem } = useFormItem()\nconst { inputId } = useFormItemInputId(props, {\n  formItemContext: formItem,\n})\nconst inputSize = useSize()\nconst inputDisabled = useDisabled()\nconst nsInput = useNamespace('input')\nconst nsTextarea = useNamespace('textarea')\n\nconst input = shallowRef<HTMLInputElement>()\nconst textarea = shallowRef<HTMLTextAreaElement>()\n\nconst focused = ref(false)\nconst hovering = ref(false)\nconst isComposing = ref(false)\nconst passwordVisible = ref(false)\nconst countStyle = ref<StyleValue>()\nconst textareaCalcStyle = shallowRef(props.inputStyle)\n\nconst _ref = computed(() => input.value || textarea.value)\n\nconst needStatusIcon = computed(() => form?.statusIcon ?? false)\nconst validateState = computed(() => formItem?.validateState || '')\nconst validateIcon = computed(\n  () => validateState.value && ValidateComponentsMap[validateState.value]\n)\nconst passwordIcon = computed(() =>\n  passwordVisible.value ? IconView : IconHide\n)\nconst containerStyle = computed<StyleValue>(() => [\n  rawAttrs.style as StyleValue,\n  props.inputStyle,\n])\nconst textareaStyle = computed<StyleValue>(() => [\n  props.inputStyle,\n  textareaCalcStyle.value,\n  { resize: props.resize },\n])\nconst nativeInputValue = computed(() =>\n  isNil(props.modelValue) ? '' : String(props.modelValue)\n)\nconst showClear = computed(\n  () =>\n    props.clearable &&\n    !inputDisabled.value &&\n    !props.readonly &&\n    !!nativeInputValue.value &&\n    (focused.value || hovering.value)\n)\nconst showPwdVisible = computed(\n  () =>\n    props.showPassword &&\n    !inputDisabled.value &&\n    !props.readonly &&\n    !!nativeInputValue.value &&\n    (!!nativeInputValue.value || focused.value)\n)\nconst isWordLimitVisible = computed(\n  () =>\n    props.showWordLimit &&\n    !!attrs.value.maxlength &&\n    (props.type === 'text' || props.type === 'textarea') &&\n    !inputDisabled.value &&\n    !props.readonly &&\n    !props.showPassword\n)\nconst textLength = computed(() => Array.from(nativeInputValue.value).length)\nconst inputExceed = computed(\n  () =>\n    // show exceed style if length of initial value greater then maxlength\n    !!isWordLimitVisible.value &&\n    textLength.value > Number(attrs.value.maxlength)\n)\nconst suffixVisible = computed(\n  () =>\n    !!slots.suffix ||\n    !!props.suffixIcon ||\n    showClear.value ||\n    props.showPassword ||\n    isWordLimitVisible.value ||\n    (!!validateState.value && needStatusIcon.value)\n)\n\nconst [recordCursor, setCursor] = useCursor(input)\n\nuseResizeObserver(textarea, (entries) => {\n  if (!isWordLimitVisible.value || props.resize !== 'both') return\n  const entry = entries[0]\n  const { width } = entry.contentRect\n  countStyle.value = {\n    /** right: 100% - width + padding(15) + right(6) */\n    right: `calc(100% - ${width + 15 + 6}px)`,\n  }\n})\n\nconst resizeTextarea = () => {\n  const { type, autosize } = props\n\n  if (!isClient || type !== 'textarea') return\n\n  if (autosize) {\n    const minRows = isObject(autosize) ? autosize.minRows : undefined\n    const maxRows = isObject(autosize) ? autosize.maxRows : undefined\n    textareaCalcStyle.value = {\n      ...calcTextareaHeight(textarea.value!, minRows, maxRows),\n    }\n  } else {\n    textareaCalcStyle.value = {\n      minHeight: calcTextareaHeight(textarea.value!).minHeight,\n    }\n  }\n}\n\nconst setNativeInputValue = () => {\n  const input = _ref.value\n  if (!input || input.value === nativeInputValue.value) return\n  input.value = nativeInputValue.value\n}\n\nconst handleInput = async (event: Event) => {\n  recordCursor()\n\n  let { value } = event.target as TargetElement\n\n  if (props.formatter) {\n    value = props.parser ? props.parser(value) : value\n    value = props.formatter(value)\n  }\n\n  // should not emit input during composition\n  // see: https://github.com/ElemeFE/element/issues/10516\n  if (isComposing.value) return\n\n  // hack for https://github.com/ElemeFE/element/issues/8548\n  // should remove the following line when we don't support IE\n  if (value === nativeInputValue.value) {\n    setNativeInputValue()\n    return\n  }\n\n  emit(UPDATE_MODEL_EVENT, value)\n  emit('input', value)\n\n  // ensure native input value is controlled\n  // see: https://github.com/ElemeFE/element/issues/12850\n  await nextTick()\n  setNativeInputValue()\n  setCursor()\n}\n\nconst handleChange = (event: Event) => {\n  emit('change', (event.target as TargetElement).value)\n}\n\nconst handleCompositionStart = (event: CompositionEvent) => {\n  emit('compositionstart', event)\n  isComposing.value = true\n}\n\nconst handleCompositionUpdate = (event: CompositionEvent) => {\n  emit('compositionupdate', event)\n  const text = (event.target as HTMLInputElement)?.value\n  const lastCharacter = text[text.length - 1] || ''\n  isComposing.value = !isKorean(lastCharacter)\n}\n\nconst handleCompositionEnd = (event: CompositionEvent) => {\n  emit('compositionend', event)\n  if (isComposing.value) {\n    isComposing.value = false\n    handleInput(event)\n  }\n}\n\nconst handlePasswordVisible = () => {\n  passwordVisible.value = !passwordVisible.value\n  focus()\n}\n\nconst focus = async () => {\n  // see: https://github.com/ElemeFE/element/issues/18573\n  await nextTick()\n  _ref.value?.focus()\n}\n\nconst blur = () => _ref.value?.blur()\n\nconst handleFocus = (event: FocusEvent) => {\n  focused.value = true\n  emit('focus', event)\n}\n\nconst handleBlur = (event: FocusEvent) => {\n  focused.value = false\n  emit('blur', event)\n  if (props.validateEvent) {\n    formItem?.validate?.('blur').catch((err) => debugWarn(err))\n  }\n}\n\nconst handleMouseLeave = (evt: MouseEvent) => {\n  hovering.value = false\n  emit('mouseleave', evt)\n}\n\nconst handleMouseEnter = (evt: MouseEvent) => {\n  hovering.value = true\n  emit('mouseenter', evt)\n}\n\nconst handleKeydown = (evt: KeyboardEvent) => {\n  emit('keydown', evt)\n}\n\nconst select = () => {\n  _ref.value?.select()\n}\n\nconst clear = () => {\n  emit(UPDATE_MODEL_EVENT, '')\n  emit('change', '')\n  emit('clear')\n  emit('input', '')\n}\n\nwatch(\n  () => props.modelValue,\n  () => {\n    nextTick(() => resizeTextarea())\n    if (props.validateEvent) {\n      formItem?.validate?.('change').catch((err) => debugWarn(err))\n    }\n  }\n)\n\n// native input value is set explicitly\n// do not use v-model / :value in template\n// see: https://github.com/ElemeFE/element/issues/14521\nwatch(nativeInputValue, () => setNativeInputValue())\n\n// when change between <input> and <textarea>,\n// update DOM dependent value and styles\n// https://github.com/ElemeFE/element/issues/14857\nwatch(\n  () => props.type,\n  async () => {\n    await nextTick()\n    setNativeInputValue()\n    resizeTextarea()\n  }\n)\n\nonMounted(() => {\n  if (!props.formatter && props.parser) {\n    debugWarn(\n      'ElInput',\n      'If you set the parser, you also need to set the formatter.'\n    )\n  }\n  setNativeInputValue()\n  nextTick(resizeTextarea)\n})\n\ndefineExpose({\n  /** @description HTML input element */\n  input,\n  /** @description HTML textarea element */\n  textarea,\n  /** @description HTML element, input or textarea */\n  ref: _ref,\n  /** @description style of textarea. */\n  textareaStyle,\n\n  /** @description from props (used on unit test) */\n  autosize: toRef(props, 'autosize'),\n\n  /** @description HTML input element native method */\n  focus,\n  /** @description HTML input element native method */\n  blur,\n  /** @description HTML input element native method */\n  select,\n  /** @description clear input value */\n  clear,\n  /** @description resize textarea. */\n  resizeTextarea,\n})\n</script>\n","import { withInstall } from '@element-plus/utils'\n\nimport Input from './src/input.vue'\n\nexport const ElInput = withInstall(Input)\nexport default ElInput\n\nexport * from './src/input'\n\nexport type InputInstance = InstanceType<typeof Input>\n"],"names":["keysOf","arr","Object","keys","alertEffects","alertProps","buildProps","title","type","String","default","description","values","TypeComponentsMap","closable","Boolean","closeText","showIcon","center","effect","alertEmits","close","evt","MouseEvent","name","Close","slots","useSlots","ns","useNamespace","visible","ref","iconComponent","props","iconClass","computed","e","is","isBoldTitle","value","emit","ElAlert","withInstall","Alert","hiddenTextarea","HIDDEN_STYLE","CONTEXT_STYLE","calculateNodeStyling","targetElement","style","window","getComputedStyle","boxSizing","getPropertyValue","paddingSize","Number","parseFloat","borderSize","contextStyle","map","join","calcTextareaHeight","minRows","maxRows","_a","document","createElement","body","appendChild","setAttribute","placeholder","height","scrollHeight","result","singleRowHeight","isNumber","minHeight","Math","max","maxHeight","min","parentNode","removeChild","UPDATE_MODEL_EVENT","inputProps","id","size","useSizeProp","disabled","modelValue","definePropType","resize","autosize","autocomplete","formatter","Function","parser","form","readonly","clearable","showPassword","showWordLimit","suffixIcon","iconPropType","prefixIcon","containerRole","label","tabindex","validateEvent","inputStyle","Array","mutable","inputEmits","isString","input","change","focus","FocusEvent","blur","clear","mouseleave","mouseenter","keydown","Event","compositionstart","CompositionEvent","compositionupdate","compositionend","DEFAULT_EXCLUDE_KEYS","LISTENER_PREFIX","useAttrs","params","excludeListeners","excludeKeys","allExcludeKeys","concat","instance","getCurrentInstance","fromPairs","entries","proxy","$attrs","filter","key","includes","test","debugWarn","useCursor","selectionRef","recordCursor","selectionStart","selectionEnd","beforeTxt","slice","afterTxt","setCursor","startPos","length","endsWith","startsWith","beforeLastChar","newIndex","indexOf","setSelectionRange","isKorean","text","inheritAttrs","rawAttrs","useRawAttrs","containerAttrs","comboBoxAttrs","containerKls","nsTextarea","b","nsInput","m","inputSize","inputDisabled","inputExceed","prepend","append","bm","prefix","suffix","showClear","showPwdVisible","class","wrapperKls","focused","attrs","formItem","useFormItem","inputId","formItemContext","useSize","useDisabled","shallowRef","textarea","hovering","isComposing","passwordVisible","countStyle","textareaCalcStyle","_ref","needStatusIcon","validateIcon","passwordIcon","containerStyle","textareaStyle","textLength","nativeInputValue","suffixVisible","useResizeObserver","width","right","input2","handleInput","event","setNativeInputValue","handlePasswordVisible","watch","nextTick","resizeTextarea","onMounted","expose","ElInput","Input"],"sourceRoot":""}